import React, { createContext, useContext, useState } from 'react';
import { IFile } from '../types/file';

// Contenus des fichiers
const homeContentFr = `// Composant d'accueil
import { useLanguage } from '../context/LanguageContext';

const Home = () => {
  const { t } = useLanguage();
  
  return (
    <div>
      <h1>{t('welcome')}</h1>
      <p>{t('description')}</p>
    </div>
  );
};

export default Home;`;

const homeContentEn = `// Home component
import { useLanguage } from '../context/LanguageContext';

const Home = () => {
  const { t } = useLanguage();
  
  return (
    <div>
      <h1>{t('welcome')}</h1>
      <p>{t('description')}</p>
    </div>
  );
};

export default Home;`;

const experienceContentFr = `# -*- coding: utf-8 -*-

class Profile:
    def __init__(self):
        self.description = """
        Ing√©nieur passionn√© par la conception et le d√©ploiement de solutions compl√®tes,
        de l'architecture logicielle √† l'int√©gration sur des plateformes SaaS.
        
        Je m'√©panouis dans la prise de responsabilit√©s techniques sur des projets
        de grande envergure, en contribuant activement aux d√©cisions strat√©giques
        concernant les choix d'architecture, les performances et la s√©curit√© des solutions.
        
        Mon expertise en vision par ordinateur et en d√©veloppement full-stack me permet
        de cr√©er des solutions innovantes et robustes.
        
        # Note personnelle:
        # Parfois je me demande si je suis un d√©veloppeur qui aime l'IA
        # ou une IA qui aime le d√©veloppement... ü§ñ
        """

        self.experience = {
            "Agreenculture": {
                "poste": "Full stack Engineer / Computer vision",
                "periode": "03/2019 - 10/2024",
                "niveau_cafe_consomme": "‚àû",  # Merci la machine √† caf√© !
                "bugs_resolus": "Plus que les √©toiles visibles depuis la Terre",
                "realisations": [
                    {
                        "titre": "Framework d'entra√Ænement de mod√®les de vision",
                        "description": "Architecture microservices Docker pour l'entra√Ænement de mod√®les de vision par ordinateur",
                        "technologies": ["React/Shadcn", "Flask", "MongoDB", "Prisma", "Docker", "CVAT"],
                        "details": [
                            "Interface moderne pour la configuration et le suivi des entra√Ænements",
                            "Support de multiples architectures (YOLO-NAS, YOLOv7, DSNet)",
                            "Versionning complet des mod√®les et param√®tres",
                            "# Fun fact: Les mod√®les sont tellement bien entra√Æn√©s qu'ils reconnaissent",
                            "# m√™me les fruits d√©guis√©s en l√©gumes ! ü•∏"
                        ],
                        "easter_egg": "Les GPU ont tellement chauff√© qu'on a pu faire cuire des ≈ìufs dessus"
                    },
                    {
                        "titre": "Plateforme de t√©l√©op√©ration robotique",
                        "description": "Solution s√©curis√©e pour le contr√¥le √† distance de robots agricoles",
                        "technologies": ["Vue.js", "Flask", "WebRTC", "GStreamer", "RabbitMQ"],
                        "details": [
                            "Streaming vid√©o temps r√©el (plus rapide que mon cerveau le matin)",
                            "Communication bidirectionnelle s√©curis√©e (m√™me les hackers n'y comprennent rien)",
                            "D√©ploiement cloud avec architecture microservices",
                            "# Note: Les robots sont devenus tellement autonomes qu'ils ont commenc√©",
                            "# √† organiser leurs propres pauses caf√© ‚òï"
                        ],
                        "fun_fact": "Un robot a essay√© de prendre un selfie une fois... #TrueStory"
                    },
                    {
                        "titre": "Syst√®me d'analyse de fruits",
                        "description": "Framework d'analyse d'images pour la d√©tection de d√©fauts",
                        "technologies": ["Qt", "OpenCV", "TensorFlow", "Kafka"],
                        "details": [
                            "Interface multi-thread√©e pour l'acquisition (aussi multit√¢che que moi avec du caf√©)",
                            "Algorithmes de reconstruction 3D (on peut presque voir la 4√®me dimension)",
                            "Traitement de plus de 500 000 √©chantillons (et pas un seul fruit n'a √©t√© mang√© pendant les tests)",
                            "# Achievement unlocked: Faire la diff√©rence entre une pomme et une poire",
                            "# (plus difficile qu'il n'y para√Æt √† 3h du matin)"
                        ],
                        "statistiques_importantes": {
                            "fruits_analyses": "500k+",
                            "taux_precision": "99.9%",
                            "fruits_manges_pendant_debug": "42"
                        }
                    }
                ],
                "competences_bonus": [
                    "Capacit√© √† d√©boguer du code en dormant",
                    "Expert en transformation de caf√© en code",
                    "Ma√Ætre Jedi de la documentation (quand elle existe)",
                    "Capable de lire les stacktraces √† l'envers"
                ]
            }
        }

        self.philosophie_dev = [
            "Le code est comme une blague : s'il faut l'expliquer, il est mauvais",
            "Il n'y a pas de bugs, que des features non document√©es",
            "La documentation, c'est comme le caf√© : jamais assez",
            "Un bon d√©veloppeur est un d√©veloppeur fain√©ant (qui automatise tout)"
        ]

        # Petit secret : J'ai une collection de rubber ducks pour le debugging
        # Ils sont tous nomm√©s d'apr√®s des algorithmes de tri

profile = Profile()
print(f"Description: {profile.description}")

# Si vous lisez ce commentaire, vous avez trouv√© un easter egg !
# F√©licitations, vous √™tes officiellement aussi curieux que moi üéâ
`;

const experienceContentEn = `# -*- coding: utf-8 -*-

class Profile:
    def __init__(self):
        self.description = """
        Engineer passionate about designing and deploying complete solutions,
        from software architecture to SaaS platform integration.
        
        I thrive on taking technical responsibilities in large-scale projects,
        actively contributing to strategic decisions regarding architecture choices,
        performance, and solution security.
        
        My expertise in computer vision and full-stack development enables me
        to create innovative and robust solutions.
        
        # Personal note:
        # Sometimes I wonder if I'm a developer who loves AI
        # or an AI who loves development... ü§ñ
        """

        self.experience = {
            "Agreenculture": {
                "position": "Full stack Engineer / Computer vision",
                "period": "03/2019 - 10/2024",
                "coffee_level_consumed": "‚àû",  # Thanks to the coffee machine!
                "bugs_solved": "More than visible stars from Earth",
                "achievements": [
                    {
                        "title": "Computer Vision Training Framework",
                        "description": "Docker-based microservices architecture for training computer vision models",
                        "technologies": ["React/Shadcn", "Flask", "MongoDB", "Prisma", "Docker", "CVAT"],
                        "details": [
                            "Modern interface for training configuration and monitoring",
                            "Support for multiple architectures (YOLO-NAS, YOLOv7, DSNet)",
                            "Complete versioning of models and parameters",
                            "# Fun fact: The models are so well trained they can recognize",
                            "# fruits disguised as vegetables! ü•∏"
                        ],
                        "easter_egg": "GPUs got so hot we could cook eggs on them"
                    },
                    {
                        "title": "Robotic Teleoperation Platform",
                        "description": "Secure solution for remote control of agricultural robots",
                        "technologies": ["Vue.js", "Flask", "WebRTC", "GStreamer", "RabbitMQ"],
                        "details": [
                            "Real-time video streaming (faster than my brain in the morning)",
                            "Secure bidirectional communication (even hackers can't figure it out)",
                            "Cloud deployment with microservices architecture",
                            "# Note: The robots became so autonomous they started",
                            "# organizing their own coffee breaks ‚òï"
                        ],
                        "fun_fact": "A robot tried to take a selfie once... #TrueStory"
                    },
                    {
                        "title": "Fruit Analysis System",
                        "description": "Image analysis framework for defect detection",
                        "technologies": ["Qt", "OpenCV", "TensorFlow", "Kafka"],
                        "details": [
                            "Multi-threaded acquisition interface (as multitasking as me with coffee)",
                            "3D reconstruction algorithms (we can almost see the 4th dimension)",
                            "Processing of over 500,000 samples (and not a single fruit was eaten during testing)",
                            "# Achievement unlocked: Telling apart an apple from a pear",
                            "# (harder than it seems at 3 AM)"
                        ],
                        "important_stats": {
                            "fruits_analyzed": "500k+",
                            "accuracy_rate": "99.9%",
                            "fruits_eaten_during_debug": "42"
                        }
                    }
                ],
                "bonus_skills": [
                    "Ability to debug code while sleeping",
                    "Expert at turning coffee into code",
                    "Jedi Master of documentation (when it exists)",
                    "Can read stacktraces backwards"
                ]
            }
        }

        self.dev_philosophy = [
            "Code is like a joke: if you have to explain it, it's bad",
            "There are no bugs, only undocumented features",
            "Documentation is like coffee: never enough",
            "A good developer is a lazy developer (who automates everything)"
        ]

        # Little secret: I have a collection of rubber ducks for debugging
        # They're all named after sorting algorithms

profile = Profile()
print(f"Description: {profile.description}")

# If you're reading this comment, you've found an easter egg!
# Congratulations, you're officially as curious as I am üéâ
`;

const personalProjectContentFr = `# Projet Personnel - DataStrike

## Description
Plateforme web open source pour l'analyse des donn√©es de match d'Overwatch

## Technologies utilis√©es
- React.js
- Graph.js
- Node.js
- Kafka
- Postgresql

## Statistiques
- 200 utilisateurs actifs
- Plus de 5000 matches analys√©s

## Liens
- [GitHub](https://github.com/DataStrike)
- [Site Web](https://datastrike.cloud/)`;

const personalProjectContentEn = `# Personal Project - DataStrike

## Description
Open source web platform for Overwatch match data analysis

## Technologies
- React.js
- Graph.js
- Node.js
- Kafka
- Postgresql

## Statistics
- 200 active users
- Over 5000 matches analyzed

## Links
- [GitHub](https://github.com/DataStrike)
- [Website](https://datastrike.cloud/)`;

const contactContentFr = `{
  "contact": {
    "nom": "Benjamin THEYTAZ",
    "titre": "Full Stack Engineer",
    "email": "benjamin.theytaz@hotmail.fr",
    "telephone": "+33652242463",
    "social": {
      "linkedin": "https://www.linkedin.com/in/benjamin-theytaz",
      "github": "https://github.com/Zat-Code"
    }
  }
}`;

const contactContentEn = `{
  "contact": {
    "name": "Benjamin THEYTAZ",
    "title": "Full Stack Engineer",
    "email": "benjamin.theytaz@hotmail.fr",
    "phone": "+33652242463",
    "social": {
      "linkedin": "https://www.linkedin.com/in/benjamin-theytaz",
      "github": "https://github.com/Zat-Code"
    }
  }
}`;

interface FileContextType {
  files: IFile[];
  activeFile: IFile | null;
  openedFiles: IFile[];
  setActiveFile: (file: IFile | null) => void;
  closeFile: (fileName: string) => void;
  isInterfaceOpen: boolean;
  closeInterface: () => void;
  openInterface: () => void;
}

const FileContext = createContext<FileContextType | undefined>(undefined);

export const FileProvider = ({ children }: { children: React.ReactNode }) => {
  const [activeFile, setActiveFile] = useState<IFile | null>(null);
  const [openedFiles, setOpenedFiles] = useState<IFile[]>([]);
  const [isInterfaceOpen, setIsInterfaceOpen] = useState(true);

  const initialFiles = [
    {
      id: 'home',
      name: 'home.tsx',
      content: {
        fr: homeContentFr,
        en: homeContentEn
      },
      language: 'typescript',
      translations: true
    },
    {
      id: 'experience',
      name: 'experience.py',
      content: {
        fr: experienceContentFr,
        en: experienceContentEn
      },
      language: 'python',
      translations: true
    },
    {
      id: 'personal_project',
      name: 'personal_project.md',
      content: {
        fr: personalProjectContentFr,
        en: personalProjectContentEn
      },
      language: 'markdown',
      translations: true
    },
    {
      id: 'contact',
      name: 'contact.json',
      content: {
        fr: contactContentFr,
        en: contactContentEn
      },
      language: 'json',
      translations: true
    }
  ];

  const [files] = useState<IFile[]>(initialFiles);

  const handleSetActiveFile = (file: IFile | null) => {
    if (file) {
      if (!openedFiles.find(f => f.id === file.id)) {
        setOpenedFiles([...openedFiles, file]);
      }
      setActiveFile(file);
    } else {
      setActiveFile(null);
    }
  };

  const closeFile = (fileName: string) => {
    const newOpenedFiles = openedFiles.filter(f => f.name !== fileName);
    setOpenedFiles(newOpenedFiles);
    
    if (activeFile?.name === fileName) {
      setActiveFile(newOpenedFiles[newOpenedFiles.length - 1] || null);
    }

    if (newOpenedFiles.length === 0) {
      closeInterface();
    }
  };

  const closeInterface = () => {
    setIsInterfaceOpen(false);
    setActiveFile(null);
    setOpenedFiles([]);
  };

  const openInterface = () => {
    setIsInterfaceOpen(true);
  };

  return (
    <FileContext.Provider value={{ 
      files, 
      activeFile, 
      openedFiles,
      setActiveFile: handleSetActiveFile,
      closeFile,
      isInterfaceOpen,
      closeInterface,
      openInterface
    }}>
      {children}
    </FileContext.Provider>
  );
};

export const useFiles = () => {
  const context = useContext(FileContext);
  if (context === undefined) {
    throw new Error('useFiles must be used within a FileProvider');
  }
  return context;
}; 